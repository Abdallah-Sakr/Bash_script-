#!/bin/bash
# Check if script is run as root
if [ "$EUID" -ne 0 ]; then
  whiptail --title "Permission Denied" --msgbox "Please run this script as root." 10 50
  exit 1
fi
# Hacker Colors
export NEWT_COLORS='
    window=black,yellow
    border=green,black
    title=green,black
    textbox=black,green
    button=black,green
    entry=black,blue
    checkbox=black,red
    compactbutton=black,red
'


# Function to build a whiptail menu of real user accounts (UID ≥ 1000)
select_user() {
  local title="$1"
  # Grab all usernames with UID ≥ 1000 (skip nobody)
  mapfile -t users < <(getent passwd | awk -F: '$3 >= 1000 && $1 != "nobody" { print $1 }')
  # Build options array: username "" username "" ...
  local opts=()
  for u in "${users[@]}"; do
    opts+=("$u" "")
  done
  # Show the menu
  whiptail --title "$title" --menu "Choose a user:" 20 60 10 \
    "${opts[@]}" 3>&1 1>&2 2>&3
}

while true; do
  CHOICE=$(whiptail --title "User & Group Management" --backtitle "System Administration" --menu "Choose an option" 25 60 18 \
    "Add User"      "Create a new user account" \
    "Modify User"   "Change user password" \
    "List Users"    "Show all system users" \
    "Enable User"   "Unlock a locked user account" \
    "Disable User"  "Lock a user account" \
    "Remove User"   "Delete a user account" \
    "Add Group"     "Create a new group" \
    "Modify Group"  "Add or remove user from a group" \
    "Delete Group"  "Delete an existing group" \
    "List Groups"   "Display all groups" \
    "Delete Password" "Delete user's password" \
    "<-- Back"      "Exit the menu" \
    3>&1 1>&2 2>&3)

  [[ $? -ne 0 ]] && break

  case $CHOICE in
    "Add User")
      USERNAME=$(whiptail --inputbox "Enter the new username:" 10 50 3>&1 1>&2 2>&3) || continue
      if id "$USERNAME" &>/dev/null; then
        whiptail --msgbox "User '$USERNAME' already exists." 8 50
        continue
      fi
      FULLNAME=$(whiptail --inputbox "Enter full name (optional):" 10 50 3>&1 1>&2 2>&3) || continue
      PASSWORD=$(whiptail --passwordbox "Enter password:" 10 50 3>&1 1>&2 2>&3) || continue
      useradd -m -c "$FULLNAME" "$USERNAME"
      echo "$USERNAME:$PASSWORD" | chpasswd
      whiptail --msgbox "User '$USERNAME' created successfully." 8 50
      ;;

    "Modify User")
      USERNAME=$(whiptail --inputbox "Enter username to change password:" 10 50 3>&1 1>&2 2>&3) || continue
      if ! id "$USERNAME" &>/dev/null; then
        whiptail --msgbox "User '$USERNAME' does not exist." 8 50
        continue
      fi
      NEWPASS=$(whiptail --passwordbox "Enter new password:" 10 50 3>&1 1>&2 2>&3) || continue
      echo "$USERNAME:$NEWPASS" | chpasswd
      whiptail --msgbox "Password for '$USERNAME' updated." 8 50
      ;;

    "List Users")
      # Get a list of users with UID >= 1000
      TMPFILE=$(mktemp)
      getent passwd | awk -F: '$3 >= 1000 && $1 != "nobody" { print $1 }' > "$TMPFILE"
      if [[ -s "$TMPFILE" ]]; then
        whiptail --title "User List" --backtitle "System Administration" --scrolltext --textbox "$TMPFILE" 20 60
      else
        whiptail --msgbox "No users found." 8 50
      fi
      rm -f "$TMPFILE"
      ;;

    "Enable User")
      USER=$(select_user "Enable User") || continue
      usermod -U "$USER"
      whiptail --msgbox "User '$USER' has been enabled." 8 50
      ;;

    "Disable User")
      USER=$(select_user "Disable User") || continue
      usermod -L "$USER"
      whiptail --msgbox "User '$USER' has been disabled." 8 50
      ;;

    "Remove User")
      USER=$(select_user "Remove User") || continue
      whiptail --yesno "Are you sure you want to delete user '$USER' and its home directory?" 10 60
      if [[ $? -eq 0 ]]; then
        userdel -r "$USER"
        whiptail --msgbox "User '$USER' deleted." 8 50
      fi
      ;;

    "Add Group")
      GROUP=$(whiptail --inputbox "Enter new group name:" 10 50 3>&1 1>&2 2>&3) || continue
      if getent group "$GROUP" > /dev/null; then
        whiptail --msgbox "Group '$GROUP' already exists." 8 50
        continue
      fi
      groupadd "$GROUP"
      whiptail --msgbox "Group '$GROUP' created successfully." 8 50
      ;;

    "Modify Group")
      GROUP=$(whiptail --inputbox "Enter group name:" 10 50 3>&1 1>&2 2>&3) || continue
      if ! getent group "$GROUP" > /dev/null; then
        whiptail --msgbox "Group '$GROUP' does not exist." 8 50
        continue
      fi
      USER=$(whiptail --inputbox "Enter username to add/remove:" 10 50 3>&1 1>&2 2>&3) || continue
      if ! id "$USER" &>/dev/null; then
        whiptail --msgbox "User '$USER' does not exist." 8 50
        continue
      fi
      if id -nG "$USER" | grep -qw "$GROUP"; then
        gpasswd -d "$USER" "$GROUP"
        whiptail --msgbox "User '$USER' removed from group '$GROUP'." 8 50
      else
        usermod -a -G "$GROUP" "$USER"
        whiptail --msgbox "User '$USER' added to group '$GROUP'." 8 50
      fi
      ;;

    "Delete Group")
      GROUP=$(whiptail --inputbox "Enter group name to delete:" 10 50 3>&1 1>&2 2>&3) || continue
      if ! getent group "$GROUP" > /dev/null; then
        whiptail --msgbox "Group '$GROUP' does not exist." 8 50
        continue
      fi
      whiptail --yesno "Are you sure you want to delete group '$GROUP'?" 10 60
      if [[ $? -eq 0 ]]; then
        groupdel "$GROUP"
        whiptail --msgbox "Group '$GROUP' deleted." 8 50
      fi
      ;;

    "List Groups")
      TMPFILE=$(mktemp)
      getent group | cut -d: -f1 > "$TMPFILE"
      if [[ -s "$TMPFILE" ]]; then
        whiptail --title "Group List" --backtitle "System Administration" --scrolltext --textbox "$TMPFILE" 20 60
      else
        whiptail --msgbox "No groups found." 8 40
      fi
      rm -f "$TMPFILE"
      ;;

    "Delete Password")
      USER=$(select_user "Delete Password") || continue
      passwd -d "$USER"  # Delete the password
      whiptail --msgbox "Password for user '$USER' has been deleted." 8 50
      ;;

    "<-- Block")
      break
      ;;
  esac
done

